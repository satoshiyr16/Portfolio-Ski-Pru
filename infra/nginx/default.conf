server {
  # バーチャルホストにアクセスするための情報 ↓のlistenはポート番号
    listen 80;
  # example.comの時にこちらのサーバを表示
    server_name example.com;
  # ドキュメントルートの設定。
  # これを設定すると、このサーバは設定したパスの配下のファイルを参照する
  # Laravelと連携するには、publicディレクトリのパスを記述する
  # 下の場合は/cyberowl/ディレクトリにlaravelアプリが配置されている事になる
    root /data/public;

  # webアプリを動かす為にヘッダー情報を追加する
  # クリックジャッキング攻撃の防止。他ドメインからiframeでサイトを表示させるのを防ぐ
    add_header X-Frame-Options "SAMEORIGIN";
  # XSS攻撃の防止。検知するとレンダリングを停止する
    add_header X-XSS-Protection "1; mode=block";
  # MIMEタイプのスニッフィングを防止
    add_header X-Content-Type-Options "nosniff";

  # インデックスの指定
  # laravelにおけるインデックスはpublic/index.phpなので、index.phpを追記する
    index index.php;

    charset utf-8;

    client_max_body_size 10M;

  # 全てのアクセスに対しての処理。左からドキュメントルート配下を参照する。以下の場合は3つのステップを踏んでいる
    # １） アクセスがきたパスの静的ファイルが存在するか
    # 2) アクセスがきたパスのディレクトリが存在するか（見つかったらその中の indexを参照する）
    # 3) 上の二つがない場合、index.phpのファイルとする（Laravelに処理を任せる）
    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    # favicon.icoのアクセスを制御
    # ホームページのアイコンの画像
    location = /favicon.ico { access_log off; log_not_found off; }
    # robots.txtのアクセスを制御
    # robots.txtとは、特定ページへのクローラー巡回を禁止（または制御）するファイル
    location = /robots.txt  { access_log off; log_not_found off; }

  # 指定したエラーコードが発生したときに表示するページのURIを指定
    error_page 404 /index.php;

  # 拡張子がphpであるファイルに対して処理する
    location ~ \.php$ {
        # appコンテナとそのポート番号を指定
        fastcgi_pass app:9000;
        # プロキシされるリクエストに必要な情報を付与
        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;
        # 一般に用いるパラメータをあらかじめ設定してあるファイル(fastcgi_params)を読み込む
        include fastcgi_params;
    }

  # よく知られたサービスやプロトコルが利用する0から1023までのポート番号からのアクセスは拒否
    location ~ /\.(?!well-known).* {
        deny all;
    }
}
